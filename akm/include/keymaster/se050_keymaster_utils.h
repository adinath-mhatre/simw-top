/* Copyright 2019,2020 NXP
 * SPDX-License-Identifier: Apache-2.0
 */

#ifndef SYSTEM_KEYMASTER_SE050_KEYMASTER_UTILS_H_
#define SYSTEM_KEYMASTER_SE050_KEYMASTER_UTILS_H_

#include "se050_keymaster_types.h"
#include <cstdlib>
#include <map>
#include <vector>

#include <hardware/keymaster0.h>
#include <hardware/keymaster1.h>
#include <hardware/keymaster2.h>

#include <keymaster/android_keymaster.h>
#include <keymaster/soft_keymaster_context.h>

#include <keymaster/UniquePtr.h>

#if defined(__cplusplus)
extern "C" {
#endif

#include "ex_sss.h"
#include "fsl_sss_api.h"
#include "fsl_sss_mbedtls_apis.h"
#include "fsl_sss_policy.h"
#include "fsl_sss_util_asn1_der.h"
//#include "sm_api.h"
#include "ex_sss_boot.h"
#if SSS_HAVE_APPLET_SE05X_IOT
#include "fsl_sss_se05x_types.h"
#include "se05x_APDU_apis.h"
#include "se05x_tlv.h"
#endif
#if defined(__cplusplus)
}
#endif
namespace keymaster {

class AuthorizationSet;
class Se050KeymasterUtils {
  private:
    ex_sss_boot_ctx_t* p_boot_ctx;
    sss_rng_context_t* p_rng_ctx;

  public:
    Se050KeymasterUtils();
    Se050KeymasterUtils(ex_sss_boot_ctx_t* boot_ctx, sss_rng_context_t* rng_ctx);
    ~Se050KeymasterUtils();

    keymaster_error_t RsaOperationParsePubKey(sss_object_t* keyObject, uint8_t** rsaN,
                                              size_t* rsaNlen);
    keymaster_error_t EcOperationParsePubKey(sss_object_t* keyObject, size_t* pubKeylen);
    keymaster_error_t UpdateRsaOperationDescription(
        const AuthorizationSet* params, const AuthorizationSet sw_enforced,
        const AuthorizationSet hw_enforced, sss_object_t* keyObject, keymaster_purpose_t purpose,
        sss_algorithm_t* algorithm, sss_km_operation_t* operation);
    keymaster_error_t SignOperationCalculateDigest(uint8_t* data, size_t data_length,
                                                   sss_algorithm_t algorithm, size_t* digestLen);
    keymaster_error_t UpdateAesOperationDescription(const AuthorizationSet* params,
                                                    const AuthorizationSet sw_enforced,
                                                    const AuthorizationSet hw_enforced,
                                                    const keymaster_purpose_t purpose,
                                                    sss_algorithm_t* algorithm,
                                                    keymaster_key_param_set_t* out_params,
                                                    sss_km_operation_t* operation);

    keymaster_error_t process_asymmetric_operation(sss_km_operation_t* operation,
                                                   const keymaster_blob_t* input,
                                                   const keymaster_blob_t* signature,
                                                   uint8_t* signature1, size_t* signaturelen);
    keymaster_error_t process_symmetric_operation(sss_km_operation_t* operation,
                                                  const AuthorizationSet* params,
                                                  const keymaster_blob_t* input,
                                                  uint8_t* signature1, size_t* signaturelen);
    keymaster_error_t process_mac_operation(sss_km_operation_t* operation,
                                            const keymaster_blob_t* input,
                                            const keymaster_blob_t* signature, uint8_t* signature1,
                                            size_t* signaturelen);
    keymaster_error_t GenerateAttestation(const KeymasterKeyBlob* key_material,
                                          const AuthorizationSet& attest_params,
                                          const AuthorizationSet& request,
                                          const AuthorizationSet& tee_enforced,
                                          keymaster_cert_chain_t* cert_chain);

    keymaster_error_t UpdateHmacOperationDescription(const AuthorizationSet* params,
                                                     const AuthorizationSet sw_enforced,
                                                     const AuthorizationSet hw_enforced,
                                                     const keymaster_purpose_t purpose,
                                                     sss_algorithm_t* algorithm,
                                                     sss_km_operation_t* operation);

    void GetFreeMem();
    sss_status_t addTPauthorizationTags(sss_object_t keyObject, AuthorizationSet* hw_enforced);

    sss_status_t key_attestation_sign_csr(X509* certificate, keymaster_algorithm_t sign_algorithm,
                                          const keymaster_digest_t digest_algo);

  protected:
    Buffer data_;

};  // Se050KeymasterDevice

size_t CountTags(const AuthorizationSet* params, keymaster_tag_t tag);
keymaster_error_t GetSSSAlgorithm(const sss_algorithm_t algorithm, sss_algorithm_t* digest_algo);
keymaster_error_t RawSignCheckDataValue(uint8_t* inputData, size_t data_length, uint8_t** rsaN,
                                        size_t rsaNlen);
keymaster_error_t parse_ec_param_set(const AuthorizationSet& params,
                                     AuthorizationSet* updated_params);
void policy_set_reset(sss_policy_u* policy);
keymaster_error_t create_policy_set(const AuthorizationSet& org_params, sss_policy_u* common,
                                    sss_policy_u* key_policy);
sss_status_t parseTPkeyObject(const keymaster_blob_t* key_data, uint32_t* keyId,
                              keymaster_algorithm_t algorithm);
sss_status_t verifyCipherTypeToKMAlgo(sss_cipher_type_t cipher, keymaster_algorithm_t algorithm);
}  // namespace keymaster

#endif

#define rsa_pub                                                                                    \
    {                                                                                              \
        0x30, 0x82, 0x02, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01,  \
            0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x02, 0x0F, 0x00, 0x30, 0x82, 0x02, 0x0A, 0x02,    \
            0x82, 0x02, 0x01, 0x00, 0xF9, 0x09, 0xF9, 0x13, 0x72, 0xDC, 0x46, 0xF3, 0xEA, 0xB6,    \
            0x83, 0xA3, 0xAC, 0x20, 0xB3, 0x35, 0x6C, 0x4C, 0x2F, 0xEB, 0x67, 0x53, 0x07, 0x09,    \
            0xEB, 0xDE, 0x56, 0x03, 0xED, 0x89, 0x9F, 0x42, 0x6F, 0x23, 0x09, 0x45, 0xB7, 0x2F,    \
            0x9A, 0xAD, 0xD3, 0x8E, 0x3F, 0xDB, 0x7A, 0x66, 0xE3, 0x75, 0xE2, 0xD9, 0x66, 0x97,    \
            0xFB, 0xE9, 0x86, 0x8C, 0x5A, 0x34, 0xC0, 0x81, 0xC0, 0x19, 0x9A, 0x8D, 0x8D, 0xDF,    \
            0x17, 0x02, 0x24, 0xC8, 0xEF, 0x08, 0xD2, 0x21, 0x6D, 0x06, 0x8A, 0x85, 0x88, 0x28,    \
            0x1A, 0xCB, 0x34, 0x19, 0xD0, 0x70, 0x24, 0x14, 0xAC, 0xA4, 0xBB, 0x14, 0xCB, 0x46,    \
            0x92, 0xF6, 0x6F, 0x0B, 0x38, 0xFC, 0xBC, 0x49, 0x6B, 0xFD, 0x15, 0xC3, 0x01, 0xD5,    \
            0x1C, 0x1C, 0x1D, 0xF4, 0x56, 0x29, 0x38, 0xDE, 0x4B, 0x1A, 0x3B, 0x43, 0x61, 0xD9,    \
            0xE2, 0xB3, 0xB0, 0xBF, 0x28, 0x74, 0x16, 0x99, 0x03, 0xF6, 0x75, 0x93, 0x16, 0xA5,    \
            0xD9, 0xAE, 0x3D, 0x89, 0x3E, 0xD2, 0x05, 0x9A, 0x40, 0xC3, 0x11, 0x32, 0x84, 0x41,    \
            0xAB, 0x13, 0x05, 0xBF, 0x4A, 0x49, 0x0B, 0xBE, 0x54, 0x48, 0x4C, 0xA6, 0xD5, 0x85,    \
            0xEC, 0xA7, 0x68, 0x2F, 0xF0, 0x9B, 0x58, 0x64, 0x91, 0x49, 0xD6, 0x94, 0x0B, 0x53,    \
            0xAE, 0x39, 0xAA, 0x28, 0x17, 0x7F, 0xFD, 0xB9, 0x40, 0x5A, 0xD9, 0x5F, 0x22, 0x00,    \
            0x2E, 0x23, 0x71, 0x50, 0x41, 0x9E, 0x3F, 0xB5, 0x41, 0x05, 0x5A, 0x91, 0x3C, 0x7F,    \
            0xAB, 0x5E, 0x51, 0x1A, 0x00, 0x3B, 0x3A, 0x3A, 0x66, 0xE9, 0xFA, 0x8F, 0xE2, 0xF0,    \
            0x46, 0xAE, 0x9D, 0xDF, 0x34, 0xBB, 0xB2, 0x32, 0xDC, 0xCC, 0x44, 0x19, 0x11, 0x22,    \
            0x84, 0x41, 0x6D, 0x64, 0x7D, 0xE4, 0x47, 0x98, 0x77, 0xAA, 0x14, 0xA0, 0x83, 0x1A,    \
            0xA1, 0xF7, 0xAE, 0xB0, 0x13, 0xC5, 0x53, 0xC3, 0x35, 0x08, 0x93, 0xB6, 0x62, 0x94,    \
            0x5D, 0x9D, 0x18, 0xB9, 0xF3, 0xB2, 0x29, 0x48, 0xA5, 0x64, 0xED, 0x6F, 0xA7, 0x1C,    \
            0x0F, 0x0D, 0x41, 0x66, 0xED, 0x55, 0x6B, 0x0E, 0x1D, 0x90, 0x1A, 0x42, 0x9C, 0x3B,    \
            0x0F, 0xA6, 0x50, 0xC7, 0x5E, 0x94, 0xA2, 0x35, 0x7B, 0x8C, 0xCB, 0x22, 0x62, 0xBA,    \
            0xB6, 0x92, 0x28, 0xDC, 0x7A, 0x5D, 0x48, 0x0E, 0xE1, 0xEE, 0x77, 0xD8, 0x22, 0x6D,    \
            0x11, 0x9C, 0x1E, 0x55, 0xC3, 0x4C, 0x41, 0x0C, 0x6A, 0xD6, 0x2E, 0x0C, 0x9D, 0xB0,    \
            0x55, 0xB8, 0xC5, 0x1C, 0x6A, 0x8F, 0x99, 0xE3, 0x1C, 0xA7, 0x57, 0x96, 0x6B, 0xF5,    \
            0x16, 0x79, 0x27, 0xE0, 0x5A, 0x4B, 0x91, 0x98, 0x6B, 0xB1, 0x78, 0xCD, 0x32, 0x4C,    \
            0x6F, 0xA4, 0x2B, 0x12, 0x2F, 0xFC, 0xBC, 0x7E, 0xFD, 0x2E, 0xBC, 0x30, 0xCD, 0xAB,    \
            0xAB, 0xE1, 0x04, 0x8D, 0xDA, 0x3C, 0xFA, 0x60, 0x32, 0x34, 0x1A, 0x89, 0x7E, 0x3E,    \
            0xC0, 0xC8, 0x79, 0x2E, 0x5A, 0x1F, 0x41, 0x07, 0xC8, 0xE2, 0x9D, 0xF6, 0x7B, 0xDB,    \
            0xFE, 0xDA, 0x29, 0x4A, 0x59, 0x57, 0x60, 0x2C, 0xCB, 0x11, 0x05, 0x94, 0xCA, 0x81,    \
            0xF3, 0x91, 0x32, 0xDC, 0xBA, 0x08, 0xD4, 0x47, 0x4D, 0x0C, 0x6F, 0x1C, 0x7B, 0x7A,    \
            0x1C, 0x85, 0x00, 0xBD, 0xA9, 0x96, 0xC0, 0x61, 0x4B, 0x3E, 0xD7, 0xCA, 0xFD, 0x57,    \
            0xCE, 0x25, 0x06, 0x33, 0x2A, 0xF5, 0x27, 0x6D, 0x37, 0x29, 0x0A, 0x30, 0x9F, 0xA2,    \
            0x2C, 0x15, 0x73, 0xAB, 0x28, 0xA8, 0x27, 0xC2, 0xDD, 0xC1, 0xC1, 0x7B, 0xD4, 0x82,    \
            0x61, 0xE8, 0xE2, 0x70, 0x4C, 0xED, 0xE1, 0xB3, 0x3C, 0x55, 0x55, 0x66, 0x51, 0x3D,    \
            0xB9, 0x1C, 0x58, 0x07, 0xBF, 0xBF, 0x7B, 0xC8, 0x15, 0xBC, 0x94, 0xF0, 0x08, 0x6A,    \
            0x10, 0x0A, 0x32, 0x06, 0xF0, 0x0F, 0xF8, 0x3F, 0xBB, 0x0E, 0xE4, 0x25, 0x02, 0x03,    \
            0x01, 0x00, 0x01,                                                                      \
    }
